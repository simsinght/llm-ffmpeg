#!/bin/bash

# ollmpeg Configuration File
# Source this file to customize ollmpeg settings

# Set defaults first
export OLLMPEG_MODEL="deepseek-r1:1.5b"
export OLLMPEG_TEMPERATURE="0.1"
export OLLMPEG_MAX_TOKENS="512"
export OLLMPEG_TIMEOUT="30"

# Custom model configurations
# Add your own model preferences here
MODEL_CONFIGS_fast="deepseek-r1:1.5b"
MODEL_CONFIGS_balanced="gemma2:2b"
MODEL_CONFIGS_powerful="llama3.2:3b"
MODEL_CONFIGS_code="codellama:7b"

# Load configuration from persistent file (overrides defaults)
load_config() {
    local config_file="$HOME/.ollmpeg.conf"
    if [[ -f "$config_file" ]]; then
        source "$config_file"
    fi
}

# Load config immediately
load_config

# Custom prompt template (advanced users)
export OLLMPEG_PROMPT_TEMPLATE="You are an expert in FFmpeg command-line usage. Generate a complete, working FFmpeg command based on the user's request.

Rules:
1. Provide ONLY the ffmpeg command, no explanations or additional text
2. Use appropriate input/output file placeholders like input.mp4, output.mp4 etc.
3. Include all necessary parameters for the requested operation
4. Ensure the command is syntactically correct and will work
5. If the request is unclear, make reasonable assumptions for common use cases
6. Prefer modern ffmpeg syntax and efficient encoding options

User request: "

# Function to write configuration to file
write_config() {
    local config_file="$HOME/.ollmpeg.conf"
    cat > "$config_file" << EOF
# ollmpeg configuration file
# This file is automatically generated and updated
OLLMPEG_MODEL="$OLLMPEG_MODEL"
OLLMPEG_TEMPERATURE="$OLLMPEG_TEMPERATURE"
OLLMPEG_MAX_TOKENS="$OLLMPEG_MAX_TOKENS"
OLLMPEG_TIMEOUT="$OLLMPEG_TIMEOUT"
EOF
}


# Function to set model by alias or name
set_model() {
    local input="$1"
    local var_name="MODEL_CONFIGS_${input}"
    local model_value="${!var_name}"
    
    # First check if it's a predefined alias
    if [[ -n "$model_value" ]]; then
        export OLLMPEG_MODEL="$model_value"
        write_config
        echo "Set model to $model_value ($input alias)"
        echo "Configuration saved to ~/.ollmpeg.conf"
        return 0
    fi
    
    # If not an alias, check if it's an available model in ollama
    if command -v ollama &> /dev/null; then
        if ollama list | grep -q "^${input}[[:space:]]"; then
            export OLLMPEG_MODEL="$input"
            write_config
            echo "Set model to $input"
            echo "Configuration saved to ~/.ollmpeg.conf"
            return 0
        fi
    fi
    
    # If neither alias nor available model, show error
    echo "Model '$input' not found."
    echo ""
    echo "Available aliases:"
    echo "  fast: $MODEL_CONFIGS_fast"
    echo "  balanced: $MODEL_CONFIGS_balanced" 
    echo "  powerful: $MODEL_CONFIGS_powerful"
    echo "  code: $MODEL_CONFIGS_code"
    
    if command -v ollama &> /dev/null; then
        echo ""
        echo "Available ollama models:"
        ollama list | tail -n +2 | awk '{print "  " $1}'
    fi
    
    return 1
}

# Function to show current configuration
show_config() {
    echo "=== ollmpeg Configuration ==="
    echo "Model: $OLLMPEG_MODEL"
    echo "Temperature: $OLLMPEG_TEMPERATURE"
    echo "Max Tokens: $OLLMPEG_MAX_TOKENS"
    echo "Timeout: ${OLLMPEG_TIMEOUT}s"
    echo ""
    echo "Available model aliases:"
    echo "  fast: $MODEL_CONFIGS_fast"
    echo "  balanced: $MODEL_CONFIGS_balanced"
    echo "  powerful: $MODEL_CONFIGS_powerful"
    echo "  code: $MODEL_CONFIGS_code"
}

# Function to reset to defaults
reset_config() {
    export OLLMPEG_MODEL="deepseek-r1:1.5b"
    export OLLMPEG_TEMPERATURE="0.1"
    export OLLMPEG_MAX_TOKENS="512"
    export OLLMPEG_TIMEOUT="30"
    echo "Configuration reset to defaults"
}

# Function to list available models
list_models() {
    echo "=== Available Models ==="
    echo ""
    echo "Predefined aliases:"
    echo "  fast: $MODEL_CONFIGS_fast"
    echo "  balanced: $MODEL_CONFIGS_balanced"
    echo "  powerful: $MODEL_CONFIGS_powerful"
    echo "  code: $MODEL_CONFIGS_code"
    
    if command -v ollama &> /dev/null; then
        echo ""
        echo "Installed ollama models:"
        if ollama list | tail -n +2 | head -1 | grep -q "NAME"; then
            echo "  No models installed yet"
        else
            ollama list | tail -n +2 | while read name id size modified; do
                echo "  $name (${size})"
            done
        fi
    else
        echo ""
        echo "Ollama not installed - run './ollmpeg --setup' first"
    fi
}

# Auto-detect and suggest best model based on system resources and available models
suggest_model() {
    local ram_gb=$(sysctl -n hw.memsize 2>/dev/null | awk '{print int($1/1024/1024/1024)}' 2>/dev/null || echo "8")
    
    echo "=== Model Recommendations ==="
    echo "System RAM: ${ram_gb}GB (estimated)"
    echo ""
    
    # Get available models
    local available_models=()
    if command -v ollama &> /dev/null; then
        while IFS= read -r model; do
            available_models+=("$model")
        done < <(ollama list | tail -n +2 | awk '{print $1}')
    fi
    
    # Recommend based on available models and system specs
    local recommended=""
    
    if [[ $ram_gb -lt 8 ]]; then
        # Low memory - prefer smaller models
        for model in "${available_models[@]}"; do
            if [[ "$model" =~ (1\.5b|1b) ]]; then
                recommended="$model"
                break
            fi
        done
        if [[ -z "$recommended" ]]; then
            recommended="deepseek-r1:1.5b"
        fi
        echo "Recommended for low memory: $recommended"
    elif [[ $ram_gb -lt 16 ]]; then
        # Medium memory - prefer 2-3b models
        for model in "${available_models[@]}"; do
            if [[ "$model" =~ (2b|3b) ]]; then
                recommended="$model"
                break
            fi
        done
        if [[ -z "$recommended" ]]; then
            recommended="gemma2:2b"
        fi
        echo "Recommended for balanced performance: $recommended"
    else
        # High memory - can use larger models
        for model in "${available_models[@]}"; do
            if [[ "$model" =~ (7b|8b) ]]; then
                recommended="$model"
                break
            fi
        done
        if [[ -z "$recommended" ]]; then
            recommended="llama3.2:3b"
        fi
        echo "Recommended for high performance: $recommended"
    fi
    
    echo ""
    echo "To use: ./config.sh set $recommended"
    
    if [[ ${#available_models[@]} -gt 0 ]]; then
        echo ""
        echo "Other available models:"
        for model in "${available_models[@]}"; do
            if [[ "$model" != "$recommended" ]]; then
                echo "  $model"
            fi
        done
    fi
}

# If this script is run directly, show configuration
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    case "${1:-}" in
        show|config)
            show_config
            ;;
        list)
            list_models
            ;;
        suggest)
            suggest_model
            ;;
        reset)
            reset_config
            ;;
        set)
            if [[ -n "$2" ]]; then
                set_model "$2"
            else
                echo "Usage: $0 set <model_name_or_alias>"
                echo ""
                list_models
            fi
            ;;
        *)
            echo "ollmpeg Configuration Manager"
            echo ""
            echo "Usage:"
            echo "  source config.sh        # Load configuration"
            echo "  ./config.sh show        # Show current config"
            echo "  ./config.sh list        # List all available models"
            echo "  ./config.sh suggest     # Get model recommendations"
            echo "  ./config.sh set <name>  # Set model by name or alias"
            echo "  ./config.sh reset       # Reset to defaults"
            echo ""
            show_config
            ;;
    esac
fi
