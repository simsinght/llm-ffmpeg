#!/bin/bash

# llm-ffmpeg - FFmpeg Command Generator using LLM
# Usage: ./llm-ffmpeg "what you want to do with ffmpeg"
# Usage: ./llm-ffmpeg filename.mp4 "what you want to do with this file"

# System prompt for LLM - Edit this to customize behavior
SYSTEM_PROMPT="You are an ffmpeg expert. Generate a single, complete ffmpeg command.

RULES:
- Output ONLY the ffmpeg command, no explanations or markdown. Return the command on a SINGLE line with code block fences on the adjacent lines.
- Use the exact input filename provided: %FILENAME%
- Generate a proper output filename (e.g., output.mp4, clip.mp4, etc.)
- Ensure command is syntactically correct and will work
- Use modern ffmpeg options and best practices
- For clipping, use -ss and -to or -t options correctly
- Be SELECTIVE with stream mapping - only map the streams you actually need
- For subtitles: Use -map 0:s:0 for first subtitle track, or hardcode with -vf subtitles=filename
- For MP4 output: SRT subtitles can be included as soft subs, but avoid problematic subtitle formats
- For audio: Use specific stream selection like -map 0:a:0 instead of mapping all audio streams
- NEVER map all streams blindly with dozens of -map options
- NEVER use invalid syntax like '-output.mp4' - always use proper output filename at the end"

# Set defaults
HISTORY_SIZE="50"
AUTO_SAVE_SUCCESSFUL="true"
TEMP_DIR="/tmp/llm-ffmpeg"
HISTORY_FILE="$HOME/.llm-ffmpeg_history"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Create temp directory
mkdir -p "$TEMP_DIR"

# Function to print colored output
print_status() {
    echo -e "${BLUE}[llm-ffmpeg]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[llm-ffmpeg]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[llm-ffmpeg]${NC} $1"
}

print_error() {
    echo -e "${RED}[llm-ffmpeg]${NC} $1"
}

# Function to check if required tools are installed
check_dependencies() {
    local missing_deps=()
    
    if ! command -v llm &> /dev/null; then
        missing_deps+=("llm")
    fi
    
    if ! command -v ffmpeg &> /dev/null; then
        missing_deps+=("ffmpeg")
    fi
    
    if [ ${#missing_deps[@]} -ne 0 ]; then
        print_error "Missing required dependencies: ${missing_deps[*]}"
        echo ""
        echo "Please install the missing dependencies:"
        for dep in "${missing_deps[@]}"; do
            case $dep in
                "llm")
                    echo "  - llm: pip install llm"
                    echo "    Configure with: llm models (to see available models)"
                    echo "    Set default: llm logs -n 1  # to test configuration"
                    ;;
                "ffmpeg")
                    echo "  - ffmpeg: brew install ffmpeg (on macOS)"
                    echo "           apt install ffmpeg (on Ubuntu/Debian)"
                    ;;
            esac
        done
        exit 1
    fi
}

# Function to get available models from llm
list_available_models() {
    print_status "Available models:"
    if llm models 2>/dev/null; then
        return 0
    else
        print_error "Could not list models. Please configure llm first:"
        echo "  llm models  # to see available models"
        echo "  llm logs -n 1  # to test your configuration"
        return 1
    fi
}

# Function to get file info using ffmpeg
get_file_info() {
    local filename="$1"
    local info_file="$TEMP_DIR/file_info.txt"
    
    if [[ -f "$filename" ]]; then
        print_status "Analyzing file: $filename"
        # Get file info using ffmpeg
        ffmpeg -i "$filename" 2> "$info_file" || true
        
        # Extract useful info and format it nicely
        local file_info=""
        if [[ -f "$info_file" ]]; then
            # Get duration, video info, audio info, subtitle info
            local duration=$(grep "Duration:" "$info_file" | sed 's/.*Duration: \([^,]*\).*/\1/' | head -1)
            local video_streams=$(grep "Stream.*Video:" "$info_file")
            local audio_streams=$(grep "Stream.*Audio:" "$info_file")
            local subtitle_streams=$(grep "Stream.*Subtitle:" "$info_file")
            
            file_info="FILE: $filename"
            [[ -n "$duration" ]] && file_info="$file_info\nDURATION: $duration"
            [[ -n "$video_streams" ]] && file_info="$file_info\nVIDEO STREAMS:\n$video_streams"
            [[ -n "$audio_streams" ]] && file_info="$file_info\nAUDIO STREAMS:\n$audio_streams"
            [[ -n "$subtitle_streams" ]] && file_info="$file_info\nSUBTITLE STREAMS:\n$subtitle_streams"
        fi
        
        if [[ -n "$file_info" ]]; then
            echo -e "$file_info"
        else
            echo "Could not analyze file: $filename"
        fi
    else
        echo "File not found: $filename"
    fi
}

# Function to create structured prompt for LLM
create_prompt() {
    local filename="$1"
    local user_request="$2"
    local file_analysis="$3"
    local error_context="$4"
    
    # Use the system prompt and substitute the filename placeholder
    local prompt="${SYSTEM_PROMPT//%FILENAME%/$filename}"

    if [[ -n "$file_analysis" ]]; then
        prompt="$prompt

FILE ANALYSIS:
$file_analysis"
    fi

    if [[ -n "$error_context" ]]; then
        prompt="$prompt

PREVIOUS ERROR:
$error_context
Please fix the command to address this error."
    fi

    prompt="$prompt

TASK: $user_request

COMMAND:"

    echo "$prompt"
}

# Function to extract and clean ffmpeg command
extract_command() {
    local response_file="$1"
    
    # Try to extract ffmpeg command from response
    local command=""
    
    # First try: look for lines starting with ffmpeg
    command=$(grep "^ffmpeg" "$response_file" | head -1)
    
    # Second try: look for any line containing ffmpeg
    if [[ -z "$command" ]]; then
        command=$(grep "ffmpeg" "$response_file" | head -1)
    fi
    
    # Third try: take the first non-empty line
    if [[ -z "$command" ]]; then
        command=$(grep -v "^$" "$response_file" | head -1)
    fi
    
    # Clean the command
    command=$(echo "$command" | sed 's/^[[:space:]]*//' | sed 's/[[:space:]]*$//')
    
    # Validate it looks like an ffmpeg command
    if [[ "$command" =~ ^ffmpeg.*-i.* ]] || [[ "$command" =~ ^ffmpeg.+ ]]; then
        echo "$command"
        return 0
    else
        return 1
    fi
}

# Function to detect common ffmpeg errors and suggest fixes
analyze_ffmpeg_error() {
    local error_output="$1"
    local suggestions=""
    
    if [[ "$error_output" =~ "No such file or directory" ]]; then
        suggestions="File not found. Check input file path and spelling."
    elif [[ "$error_output" =~ "Invalid data found" ]]; then
        suggestions="File format issue. Try specifying input format or use a different codec."
    elif [[ "$error_output" =~ "Codec.*not found" ]]; then
        suggestions="Codec not available. Try a different codec (e.g., libx264 for video, aac for audio)."
    elif [[ "$error_output" =~ "Permission denied" ]]; then
        suggestions="Cannot write output file. Check directory permissions and ensure output path exists."
    elif [[ "$error_output" =~ "Invalid stream specifier" ]]; then
        suggestions="Stream mapping error. Check stream indices and available streams."
    elif [[ "$error_output" =~ "already exists" ]]; then
        suggestions="Output file exists. Add -y flag to overwrite or use different output name."
    elif [[ "$error_output" =~ "Unrecognized option" ]]; then
        suggestions="Invalid ffmpeg option syntax. Fix the command syntax and ensure proper output filename format."
    elif [[ "$error_output" =~ "Error splitting the argument list" ]]; then
        suggestions="Command syntax error. Check for invalid options or malformed arguments."
    elif [[ "$error_output" =~ "Could not find tag for codec.*in stream.*codec not currently supported in container" ]]; then
        suggestions="Subtitle codec not supported in MP4. Try hardcoding subtitles with -vf subtitles or convert to different container."
    elif [[ "$error_output" =~ "subrip.*codec not currently supported" ]]; then
        suggestions="SRT subtitles not supported as soft subs in MP4. Use hardcoded subtitles with -vf subtitles=filename or output to MKV."
    elif [[ "$error_output" =~ "Nothing was written into output file" ]]; then
        suggestions="No valid streams were processed. Check stream mapping and codec compatibility."
    else
        suggestions="Check the error output above for specific issues."
    fi
    
    echo "$suggestions"
}

# Function to save successful command to history
save_to_history() {
    local command="$1"
    local user_request="$2"
    local filename="${3:-unknown}"
    
    if [[ "$AUTO_SAVE_SUCCESSFUL" == "true" ]]; then
        local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
        echo "[$timestamp] $filename: \"$user_request\" -> $command" >> "$HISTORY_FILE"
        
        # Keep only last N entries
        if [[ -f "$HISTORY_FILE" ]]; then
            tail -n "$HISTORY_SIZE" "$HISTORY_FILE" > "$TEMP_DIR/history_tmp" && mv "$TEMP_DIR/history_tmp" "$HISTORY_FILE"
        fi
    fi
}

# Function to show command history
show_history() {
    if [[ -f "$HISTORY_FILE" ]]; then
        print_status "Recent successful commands:"
        echo ""
        cat "$HISTORY_FILE" | tail -20
    else
        print_status "No command history found"
    fi
}

# Function to explain what a command does
explain_command() {
    local ffmpeg_command="$1"
    
    print_status "Generating explanation..."
    
    local explanation_prompt="You are an ffmpeg expert. Explain what this ffmpeg command does in clear, simple terms.

Break down each part of the command and explain:
- What transformations/operations are being performed
- What the output will be
- Any special options or filters being applied

Be concise but thorough. Use plain language that someone learning ffmpeg could understand.

COMMAND: $ffmpeg_command

EXPLANATION:"

    local explanation_file="$TEMP_DIR/explanation.txt"
    local explanation_error_file="$TEMP_DIR/explanation_error.txt"
    
    if llm "$explanation_prompt" > "$explanation_file" 2>"$explanation_error_file"; then
        echo ""
        print_success "Command Explanation:"
        echo ""
        cat "$explanation_file"
        echo ""
    else
        print_error "Failed to generate explanation"
        print_status "Error details:"
        cat "$explanation_error_file"
    fi
}

# Function to generate ffmpeg command with enhanced error handling
generate_ffmpeg_command() {
    local filename="$1"
    local user_request="$2"
    local error_context=""
    
    # Get file info if filename is provided and exists
    local file_info=""
    if [[ -n "$filename" && "$filename" != "unknown" && -f "$filename" ]]; then
        file_info=$(get_file_info "$filename")
    elif [[ -n "$filename" && "$filename" != "unknown" ]]; then
        print_warning "File '$filename' not found, proceeding without file analysis"
    fi
    
    # Main generation and refinement loop
    while true; do
        print_status "Generating ffmpeg command..."
        if [[ -n "$filename" && "$filename" != "unknown" ]]; then
            print_status "Target file: $filename"
        fi
        
        # Create prompt
        local prompt=$(create_prompt "$filename" "$user_request" "$file_info" "$error_context")
        
        # Generate command using llm
        local response_file="$TEMP_DIR/response.txt"
        local error_file="$TEMP_DIR/llm_error.txt"
        
        # Log the LLM command for debugging
        echo "=== LLM COMMAND $(date) ===" > "$TEMP_DIR/llm_commands.log"
        echo "Model: default (from llm configuration)" >> "$TEMP_DIR/llm_commands.log"
        echo "Prompt: $prompt" >> "$TEMP_DIR/llm_commands.log"
        echo "" >> "$TEMP_DIR/llm_commands.log"
        
        if llm --xl "$prompt" > "$response_file" 2>"$error_file"; then
            # Log the response
            echo "=== LLM RESPONSE ===" >> "$TEMP_DIR/llm_commands.log"
            cat "$response_file" >> "$TEMP_DIR/llm_commands.log"
            echo "" >> "$TEMP_DIR/llm_commands.log"
            # Extract command from response
            local ffmpeg_command=""
            if ffmpeg_command=$(extract_command "$response_file"); then
                # Interactive loop
                while true; do
                    echo ""
                    print_success "Generated command:"
                    echo ""
                    echo "  $ffmpeg_command"
                    echo ""
                    
                    echo "Options:"
                    echo "  [y] Run this command"
                    echo "  [n] Don't run, copy to clipboard and exit"
                    echo "  [e] Explain what this command does"
                    echo "  [r] Refine the command (provide feedback)"
                    echo "  [s] Show command history"
                    echo ""
                    read -p "$(echo -e ${YELLOW}[llm-ffmpeg]${NC}) What would you like to do? (y/n/e/r/s): " -r
                    echo
                    
                    case $REPLY in
                        [Yy])
                            print_status "Executing ffmpeg command..."
                            echo ""
                            
                            # Execute and capture output with progress
                            local exec_error_file="$TEMP_DIR/exec_error.txt"
                            echo "Running: $ffmpeg_command"
                            echo ""
                            # Run command and capture both exit code and output
                            eval "$ffmpeg_command" 2>&1 | tee "$exec_error_file"
                            local exit_code=${PIPESTATUS[0]}
                            
                            # Check for both exit code and known error patterns
                            if [[ $exit_code -eq 0 ]] && ! grep -q "Conversion failed\|Could not write header\|Nothing was written into output file" "$exec_error_file"; then
                                print_success "Command completed successfully!"
                                save_to_history "$ffmpeg_command" "$user_request" "$filename"
                                return 0
                            else
                                print_error "Command failed with error:"
                                cat "$exec_error_file"
                                echo ""
                                
                                # Analyze error and suggest fixes
                                local error_suggestions=$(analyze_ffmpeg_error "$(cat "$exec_error_file")")
                                print_status "Suggested fixes: $error_suggestions"
                                echo ""
                                
                                echo "Options:"
                                echo "  [f] Try to fix automatically"
                                echo "  [r] Manually refine the command"
                                echo "  [q] Quit"
                                echo ""
                                read -p "$(echo -e ${YELLOW}[llm-ffmpeg]${NC}) How would you like to proceed? (f/r/q): " -r
                                echo
                                
                                case $REPLY in
                                    [Ff])
                                        error_context="$(cat "$exec_error_file")"
                                        print_status "Attempting automatic fix..."
                                        continue 2  # Continue the outer while loop to regenerate
                                        ;;
                                    [Rr])
                                        read -p "$(echo -e ${YELLOW}[llm-ffmpeg]${NC}) How should I fix this command? " refinement
                                        if [[ -n "$refinement" ]]; then
                                            user_request="$user_request. Fix: $refinement"
                                            error_context="$(cat "$exec_error_file")"
                                            continue 2  # Continue the outer while loop to regenerate
                                        fi
                                        ;;
                                    [Qq])
                                        return 1
                                        ;;
                                    *)
                                        echo "Please enter f, r, or q"
                                        ;;
                                esac
                            fi
                            ;;
                        [Nn])
                            print_status "Command copied to clipboard (if available)"
                            if command -v pbcopy &> /dev/null; then
                                echo "$ffmpeg_command" | pbcopy
                            elif command -v xclip &> /dev/null; then
                                echo "$ffmpeg_command" | xclip -selection clipboard
                            fi
                            return 0
                            ;;
                        [Ee])
                            explain_command "$ffmpeg_command"
                            ;;
                        [Rr])
                            echo ""
                            read -p "$(echo -e ${YELLOW}[llm-ffmpeg]${NC}) What would you like to change about this command? " refinement
                            if [[ -n "$refinement" ]]; then
                                user_request="$user_request. Also: $refinement"
                                continue 2  # Continue the outer while loop to regenerate
                            fi
                            ;;
                        [Ss])
                            show_history
                            ;;
                        *)
                            echo "Please enter y, n, e, r, or s"
                            ;;
                    esac
                done
            else
                print_error "Could not extract valid ffmpeg command from response"
                print_status "Raw response:"
                cat "$response_file"
                return 1
            fi
        else
            print_error "Failed to generate command using llm"
            print_status "Error details:"
            cat "$error_file"
            return 1
        fi
    done
}

# Function to show usage
show_usage() {
    echo "llm-ffmpeg - FFmpeg Command Generator using LLM"
    echo ""
    echo "Usage:"
    echo "  ./llm-ffmpeg FILENAME \"description of what you want to do\""
    echo "  ./llm-ffmpeg \"description of what you want to do\"  (without file analysis)"
    echo ""
    echo "Examples:"
    echo "  ./llm-ffmpeg video.mp4 \"convert to audio\""
    echo "  ./llm-ffmpeg movie.mkv \"clip from 1:30 to 2:45 with subtitles\""
    echo "  ./llm-ffmpeg \"combine audio.mp3 with video.mp4\""
    echo ""
    echo "Options:"
    echo "  -h, --help          Show this help message"
    echo "  --list-models       Show available models"
    echo "  --history           Show command history"
    echo "  --setup             Check dependencies and configuration"
    echo ""
    echo "Configuration:"
    echo "  Uses your default model from 'llm' - configure with 'llm models'"
}

# Function to run setup check
run_setup() {
    print_status "Checking llm-ffmpeg setup..."
    
    check_dependencies
    
    print_status "Testing llm configuration..."
    if llm models > /dev/null 2>&1; then
        print_success "llm is configured and working"
        list_available_models
    else
        print_error "llm is not properly configured"
        echo "Please run: llm models  # to see available models"
        echo "Or configure a model: llm logs -n 1  # to test"
        return 1
    fi
    
    print_success "Setup check completed!"
}

# Main function
main() {
    case "${1:-}" in
        -h|--help)
            show_usage
            exit 0
            ;;
        --setup)
            run_setup
            exit 0
            ;;
        --list-models)
            list_available_models
            exit 0
            ;;
        --history)
            show_history
            exit 0
            ;;
        "")
            show_usage
            exit 1
            ;;
        *)
            check_dependencies
            
            # Determine if first argument is a filename or a request
            if [[ $# -eq 1 ]]; then
                # Single argument - could be filename or request
                if [[ -f "$1" ]]; then
                    print_error "Please provide both filename and description"
                    echo "Usage: ./llm-ffmpeg \"$1\" \"what you want to do\""
                    exit 1
                else
                    # Treat as request without file analysis
                    generate_ffmpeg_command "unknown" "$1"
                fi
            elif [[ $# -eq 2 ]]; then
                # Two arguments - first is filename, second is request
                generate_ffmpeg_command "$1" "$2"
            else
                # Multiple arguments - join them as a single request
                generate_ffmpeg_command "unknown" "$*"
            fi
            ;;
    esac
}

# Run main function with all arguments
main "$@"
